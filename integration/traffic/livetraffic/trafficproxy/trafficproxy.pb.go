// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: trafficproxy.proto

package trafficproxy

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TrafficType int32

const (
	TrafficType_FLOW     TrafficType = 0
	TrafficType_INCIDENT TrafficType = 1
)

// Enum value maps for TrafficType.
var (
	TrafficType_name = map[int32]string{
		0: "FLOW",
		1: "INCIDENT",
	}
	TrafficType_value = map[string]int32{
		"FLOW":     0,
		"INCIDENT": 1,
	}
)

func (x TrafficType) Enum() *TrafficType {
	p := new(TrafficType)
	*p = x
	return p
}

func (x TrafficType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrafficType) Descriptor() protoreflect.EnumDescriptor {
	return file_trafficproxy_proto_enumTypes[0].Descriptor()
}

func (TrafficType) Type() protoreflect.EnumType {
	return &file_trafficproxy_proto_enumTypes[0]
}

func (x TrafficType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrafficType.Descriptor instead.
func (TrafficType) EnumDescriptor() ([]byte, []int) {
	return file_trafficproxy_proto_rawDescGZIP(), []int{0}
}

type TrafficLevel int32

const (
	TrafficLevel_NO_LEVELS  TrafficLevel = 0
	TrafficLevel_CLOSED     TrafficLevel = 1
	TrafficLevel_CONGESTED  TrafficLevel = 3
	TrafficLevel_SLOW_SPEED TrafficLevel = 5
	TrafficLevel_FREE_FLOW  TrafficLevel = 7
	TrafficLevel_UNKNOWN    TrafficLevel = 10
)

// Enum value maps for TrafficLevel.
var (
	TrafficLevel_name = map[int32]string{
		0:  "NO_LEVELS",
		1:  "CLOSED",
		3:  "CONGESTED",
		5:  "SLOW_SPEED",
		7:  "FREE_FLOW",
		10: "UNKNOWN",
	}
	TrafficLevel_value = map[string]int32{
		"NO_LEVELS":  0,
		"CLOSED":     1,
		"CONGESTED":  3,
		"SLOW_SPEED": 5,
		"FREE_FLOW":  7,
		"UNKNOWN":    10,
	}
)

func (x TrafficLevel) Enum() *TrafficLevel {
	p := new(TrafficLevel)
	*p = x
	return p
}

func (x TrafficLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrafficLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_trafficproxy_proto_enumTypes[1].Descriptor()
}

func (TrafficLevel) Type() protoreflect.EnumType {
	return &file_trafficproxy_proto_enumTypes[1]
}

func (x TrafficLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrafficLevel.Descriptor instead.
func (TrafficLevel) EnumDescriptor() ([]byte, []int) {
	return file_trafficproxy_proto_rawDescGZIP(), []int{1}
}

type Action int32

const (
	Action_UPDATE Action = 0
	Action_DELETE Action = 1
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0: "UPDATE",
		1: "DELETE",
	}
	Action_value = map[string]int32{
		"UPDATE": 0,
		"DELETE": 1,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_trafficproxy_proto_enumTypes[2].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_trafficproxy_proto_enumTypes[2]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_trafficproxy_proto_rawDescGZIP(), []int{2}
}

type IncidentType int32

const (
	IncidentType_ACCIDENT               IncidentType = 0
	IncidentType_CONGESTION             IncidentType = 1
	IncidentType_CONSTRUCTION           IncidentType = 2
	IncidentType_DISABLED_VEHICLE       IncidentType = 3
	IncidentType_EVENT                  IncidentType = 4
	IncidentType_MISCELLANEOUS          IncidentType = 5
	IncidentType_PLANNED_EVENT          IncidentType = 6
	IncidentType_ROAD_HAZARD            IncidentType = 7
	IncidentType_SCHEDULED_CONSTRUCTION IncidentType = 8
	IncidentType_WEATHER                IncidentType = 9
	IncidentType_POLICE                 IncidentType = 10
	IncidentType_ROAD_CLOSURE           IncidentType = 11
	IncidentType_ROAD_CONTRACTION       IncidentType = 12
)

// Enum value maps for IncidentType.
var (
	IncidentType_name = map[int32]string{
		0:  "ACCIDENT",
		1:  "CONGESTION",
		2:  "CONSTRUCTION",
		3:  "DISABLED_VEHICLE",
		4:  "EVENT",
		5:  "MISCELLANEOUS",
		6:  "PLANNED_EVENT",
		7:  "ROAD_HAZARD",
		8:  "SCHEDULED_CONSTRUCTION",
		9:  "WEATHER",
		10: "POLICE",
		11: "ROAD_CLOSURE",
		12: "ROAD_CONTRACTION",
	}
	IncidentType_value = map[string]int32{
		"ACCIDENT":               0,
		"CONGESTION":             1,
		"CONSTRUCTION":           2,
		"DISABLED_VEHICLE":       3,
		"EVENT":                  4,
		"MISCELLANEOUS":          5,
		"PLANNED_EVENT":          6,
		"ROAD_HAZARD":            7,
		"SCHEDULED_CONSTRUCTION": 8,
		"WEATHER":                9,
		"POLICE":                 10,
		"ROAD_CLOSURE":           11,
		"ROAD_CONTRACTION":       12,
	}
)

func (x IncidentType) Enum() *IncidentType {
	p := new(IncidentType)
	*p = x
	return p
}

func (x IncidentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IncidentType) Descriptor() protoreflect.EnumDescriptor {
	return file_trafficproxy_proto_enumTypes[3].Descriptor()
}

func (IncidentType) Type() protoreflect.EnumType {
	return &file_trafficproxy_proto_enumTypes[3]
}

func (x IncidentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IncidentType.Descriptor instead.
func (IncidentType) EnumDescriptor() ([]byte, []int) {
	return file_trafficproxy_proto_rawDescGZIP(), []int{3}
}

type IncidentSeverity int32

const (
	IncidentSeverity_BLOCKER    IncidentSeverity = 0
	IncidentSeverity_CRITICAL   IncidentSeverity = 1
	IncidentSeverity_MAJOR      IncidentSeverity = 2
	IncidentSeverity_MINOR      IncidentSeverity = 3
	IncidentSeverity_LOW_IMPACT IncidentSeverity = 4
)

// Enum value maps for IncidentSeverity.
var (
	IncidentSeverity_name = map[int32]string{
		0: "BLOCKER",
		1: "CRITICAL",
		2: "MAJOR",
		3: "MINOR",
		4: "LOW_IMPACT",
	}
	IncidentSeverity_value = map[string]int32{
		"BLOCKER":    0,
		"CRITICAL":   1,
		"MAJOR":      2,
		"MINOR":      3,
		"LOW_IMPACT": 4,
	}
)

func (x IncidentSeverity) Enum() *IncidentSeverity {
	p := new(IncidentSeverity)
	*p = x
	return p
}

func (x IncidentSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IncidentSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_trafficproxy_proto_enumTypes[4].Descriptor()
}

func (IncidentSeverity) Type() protoreflect.EnumType {
	return &file_trafficproxy_proto_enumTypes[4]
}

func (x IncidentSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IncidentSeverity.Descriptor instead.
func (IncidentSeverity) EnumDescriptor() ([]byte, []int) {
	return file_trafficproxy_proto_rawDescGZIP(), []int{4}
}

type TrafficRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficSource *TrafficSource `protobuf:"bytes,1,opt,name=trafficSource,proto3" json:"trafficSource,omitempty"`
	TrafficType   []TrafficType  `protobuf:"varint,2,rep,packed,name=trafficType,proto3,enum=trafficproxy.TrafficType" json:"trafficType,omitempty"`
	// Types that are assignable to RequestOneof:
	//	*TrafficRequest_TrafficAllRequest
	//	*TrafficRequest_TrafficWayIDsRequest
	//	*TrafficRequest_TrafficStreamingDeltaRequest
	RequestOneof isTrafficRequest_RequestOneof `protobuf_oneof:"request_oneof"`
	// timestamp of expected traffic data, number of milliseconds since the Epoch.
	// 0 means request for current(live) traffic data, otherwise request for archived traffic data.
	// For archived traffic data, only allows trafficAllRequest and trafficWayIDsRequest.
	Timestamp int64 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *TrafficRequest) Reset() {
	*x = TrafficRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trafficproxy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficRequest) ProtoMessage() {}

func (x *TrafficRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trafficproxy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficRequest.ProtoReflect.Descriptor instead.
func (*TrafficRequest) Descriptor() ([]byte, []int) {
	return file_trafficproxy_proto_rawDescGZIP(), []int{0}
}

func (x *TrafficRequest) GetTrafficSource() *TrafficSource {
	if x != nil {
		return x.TrafficSource
	}
	return nil
}

func (x *TrafficRequest) GetTrafficType() []TrafficType {
	if x != nil {
		return x.TrafficType
	}
	return nil
}

func (m *TrafficRequest) GetRequestOneof() isTrafficRequest_RequestOneof {
	if m != nil {
		return m.RequestOneof
	}
	return nil
}

func (x *TrafficRequest) GetTrafficAllRequest() *TrafficAllRequest {
	if x, ok := x.GetRequestOneof().(*TrafficRequest_TrafficAllRequest); ok {
		return x.TrafficAllRequest
	}
	return nil
}

func (x *TrafficRequest) GetTrafficWayIDsRequest() *TrafficWayIDsRequest {
	if x, ok := x.GetRequestOneof().(*TrafficRequest_TrafficWayIDsRequest); ok {
		return x.TrafficWayIDsRequest
	}
	return nil
}

func (x *TrafficRequest) GetTrafficStreamingDeltaRequest() *TrafficStreamingDeltaRequest {
	if x, ok := x.GetRequestOneof().(*TrafficRequest_TrafficStreamingDeltaRequest); ok {
		return x.TrafficStreamingDeltaRequest
	}
	return nil
}

func (x *TrafficRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type isTrafficRequest_RequestOneof interface {
	isTrafficRequest_RequestOneof()
}

type TrafficRequest_TrafficAllRequest struct {
	TrafficAllRequest *TrafficAllRequest `protobuf:"bytes,3,opt,name=trafficAllRequest,proto3,oneof"`
}

type TrafficRequest_TrafficWayIDsRequest struct {
	TrafficWayIDsRequest *TrafficWayIDsRequest `protobuf:"bytes,4,opt,name=trafficWayIDsRequest,proto3,oneof"`
}

type TrafficRequest_TrafficStreamingDeltaRequest struct {
	TrafficStreamingDeltaRequest *TrafficStreamingDeltaRequest `protobuf:"bytes,5,opt,name=trafficStreamingDeltaRequest,proto3,oneof"`
}

func (*TrafficRequest_TrafficAllRequest) isTrafficRequest_RequestOneof() {}

func (*TrafficRequest_TrafficWayIDsRequest) isTrafficRequest_RequestOneof() {}

func (*TrafficRequest_TrafficStreamingDeltaRequest) isTrafficRequest_RequestOneof() {}

type TrafficAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TrafficAllRequest) Reset() {
	*x = TrafficAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trafficproxy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficAllRequest) ProtoMessage() {}

func (x *TrafficAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trafficproxy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficAllRequest.ProtoReflect.Descriptor instead.
func (*TrafficAllRequest) Descriptor() ([]byte, []int) {
	return file_trafficproxy_proto_rawDescGZIP(), []int{1}
}

type TrafficWayIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WayIDs []int64 `protobuf:"zigzag64,1,rep,packed,name=wayIDs,proto3" json:"wayIDs,omitempty"` // positive means forward, negative means backward
}

func (x *TrafficWayIDsRequest) Reset() {
	*x = TrafficWayIDsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trafficproxy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficWayIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficWayIDsRequest) ProtoMessage() {}

func (x *TrafficWayIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trafficproxy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficWayIDsRequest.ProtoReflect.Descriptor instead.
func (*TrafficWayIDsRequest) Descriptor() ([]byte, []int) {
	return file_trafficproxy_proto_rawDescGZIP(), []int{2}
}

func (x *TrafficWayIDsRequest) GetWayIDs() []int64 {
	if x != nil {
		return x.WayIDs
	}
	return nil
}

type TrafficStreamingDeltaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamingRule *TrafficStreamingDeltaRequest_StreamingRule `protobuf:"bytes,1,opt,name=streamingRule,proto3" json:"streamingRule,omitempty"`
}

func (x *TrafficStreamingDeltaRequest) Reset() {
	*x = TrafficStreamingDeltaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trafficproxy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficStreamingDeltaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficStreamingDeltaRequest) ProtoMessage() {}

func (x *TrafficStreamingDeltaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trafficproxy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficStreamingDeltaRequest.ProtoReflect.Descriptor instead.
func (*TrafficStreamingDeltaRequest) Descriptor() ([]byte, []int) {
	return file_trafficproxy_proto_rawDescGZIP(), []int{3}
}

func (x *TrafficStreamingDeltaRequest) GetStreamingRule() *TrafficStreamingDeltaRequest_StreamingRule {
	if x != nil {
		return x.StreamingRule
	}
	return nil
}

type TrafficResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowResponses     []*FlowResponse     `protobuf:"bytes,1,rep,name=flowResponses,proto3" json:"flowResponses,omitempty"`
	IncidentResponses []*IncidentResponse `protobuf:"bytes,2,rep,name=incidentResponses,proto3" json:"incidentResponses,omitempty"`
}

func (x *TrafficResponse) Reset() {
	*x = TrafficResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trafficproxy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficResponse) ProtoMessage() {}

func (x *TrafficResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trafficproxy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficResponse.ProtoReflect.Descriptor instead.
func (*TrafficResponse) Descriptor() ([]byte, []int) {
	return file_trafficproxy_proto_rawDescGZIP(), []int{4}
}

func (x *TrafficResponse) GetFlowResponses() []*FlowResponse {
	if x != nil {
		return x.FlowResponses
	}
	return nil
}

func (x *TrafficResponse) GetIncidentResponses() []*IncidentResponse {
	if x != nil {
		return x.IncidentResponses
	}
	return nil
}

type TrafficSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region          string   `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	TrafficProvider string   `protobuf:"bytes,2,opt,name=trafficProvider,proto3" json:"trafficProvider,omitempty"`
	MapProvider     string   `protobuf:"bytes,3,opt,name=mapProvider,proto3" json:"mapProvider,omitempty"`
	Subregion       []string `protobuf:"bytes,4,rep,name=subregion,proto3" json:"subregion,omitempty"` // leave empty if requires full region data
}

func (x *TrafficSource) Reset() {
	*x = TrafficSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trafficproxy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficSource) ProtoMessage() {}

func (x *TrafficSource) ProtoReflect() protoreflect.Message {
	mi := &file_trafficproxy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficSource.ProtoReflect.Descriptor instead.
func (*TrafficSource) Descriptor() ([]byte, []int) {
	return file_trafficproxy_proto_rawDescGZIP(), []int{5}
}

func (x *TrafficSource) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *TrafficSource) GetTrafficProvider() string {
	if x != nil {
		return x.TrafficProvider
	}
	return ""
}

func (x *TrafficSource) GetMapProvider() string {
	if x != nil {
		return x.MapProvider
	}
	return ""
}

func (x *TrafficSource) GetSubregion() []string {
	if x != nil {
		return x.Subregion
	}
	return nil
}

type FlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flow        *Flow  `protobuf:"bytes,1,opt,name=flow,proto3" json:"flow,omitempty"`
	Action      Action `protobuf:"varint,2,opt,name=action,proto3,enum=trafficproxy.Action" json:"action,omitempty"`
	TrasctionID string `protobuf:"bytes,3,opt,name=trasctionID,proto3" json:"trasctionID,omitempty"` // unique ID for tracking the Flow from provider to end user
}

func (x *FlowResponse) Reset() {
	*x = FlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trafficproxy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowResponse) ProtoMessage() {}

func (x *FlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trafficproxy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowResponse.ProtoReflect.Descriptor instead.
func (*FlowResponse) Descriptor() ([]byte, []int) {
	return file_trafficproxy_proto_rawDescGZIP(), []int{6}
}

func (x *FlowResponse) GetFlow() *Flow {
	if x != nil {
		return x.Flow
	}
	return nil
}

func (x *FlowResponse) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_UPDATE
}

func (x *FlowResponse) GetTrasctionID() string {
	if x != nil {
		return x.TrasctionID
	}
	return ""
}

type Flow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WayID        int64        `protobuf:"zigzag64,1,opt,name=wayID,proto3" json:"wayID,omitempty"`                                            // positive means forward, negative means backward
	Speed        float32      `protobuf:"fixed32,2,opt,name=speed,proto3" json:"speed,omitempty"`                                             // unit: meter per second. always >= 0
	TrafficLevel TrafficLevel `protobuf:"varint,3,opt,name=trafficLevel,proto3,enum=trafficproxy.TrafficLevel" json:"trafficLevel,omitempty"` // `trafficLevel==CLOSED` means blocking Flow
	Timestamp    int64        `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                      // received timestamp from provider, number of milliseconds since the Epoch
	Offset       int32        `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit        int32        `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *Flow) Reset() {
	*x = Flow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trafficproxy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flow) ProtoMessage() {}

func (x *Flow) ProtoReflect() protoreflect.Message {
	mi := &file_trafficproxy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flow.ProtoReflect.Descriptor instead.
func (*Flow) Descriptor() ([]byte, []int) {
	return file_trafficproxy_proto_rawDescGZIP(), []int{7}
}

func (x *Flow) GetWayID() int64 {
	if x != nil {
		return x.WayID
	}
	return 0
}

func (x *Flow) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *Flow) GetTrafficLevel() TrafficLevel {
	if x != nil {
		return x.TrafficLevel
	}
	return TrafficLevel_NO_LEVELS
}

func (x *Flow) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Flow) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Flow) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type IncidentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Incident    *Incident `protobuf:"bytes,1,opt,name=incident,proto3" json:"incident,omitempty"`
	Action      Action    `protobuf:"varint,2,opt,name=action,proto3,enum=trafficproxy.Action" json:"action,omitempty"`
	TrasctionID string    `protobuf:"bytes,3,opt,name=trasctionID,proto3" json:"trasctionID,omitempty"` // unique ID for tracking the Incident from provider to end user
}

func (x *IncidentResponse) Reset() {
	*x = IncidentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trafficproxy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncidentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncidentResponse) ProtoMessage() {}

func (x *IncidentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trafficproxy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncidentResponse.ProtoReflect.Descriptor instead.
func (*IncidentResponse) Descriptor() ([]byte, []int) {
	return file_trafficproxy_proto_rawDescGZIP(), []int{8}
}

func (x *IncidentResponse) GetIncident() *Incident {
	if x != nil {
		return x.Incident
	}
	return nil
}

func (x *IncidentResponse) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_UPDATE
}

func (x *IncidentResponse) GetTrasctionID() string {
	if x != nil {
		return x.TrasctionID
	}
	return ""
}

type Incident struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncidentID            string           `protobuf:"bytes,1,opt,name=incidentID,proto3" json:"incidentID,omitempty"`                   // unique ID of this incident
	AffectedWayIDs        []int64          `protobuf:"zigzag64,2,rep,packed,name=affectedWayIDs,proto3" json:"affectedWayIDs,omitempty"` // positive means forward, negative means backward
	IncidentType          IncidentType     `protobuf:"varint,3,opt,name=incidentType,proto3,enum=trafficproxy.IncidentType" json:"incidentType,omitempty"`
	IncidentSeverity      IncidentSeverity `protobuf:"varint,4,opt,name=incidentSeverity,proto3,enum=trafficproxy.IncidentSeverity" json:"incidentSeverity,omitempty"`
	IncidentLocation      *Location        `protobuf:"bytes,5,opt,name=incidentLocation,proto3" json:"incidentLocation,omitempty"`
	Description           string           `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	FirstCrossStreet      string           `protobuf:"bytes,7,opt,name=firstCrossStreet,proto3" json:"firstCrossStreet,omitempty"`
	SecondCrossStreet     string           `protobuf:"bytes,8,opt,name=secondCrossStreet,proto3" json:"secondCrossStreet,omitempty"`
	StreetName            string           `protobuf:"bytes,9,opt,name=streetName,proto3" json:"streetName,omitempty"`
	EventCode             int32            `protobuf:"varint,10,opt,name=eventCode,proto3" json:"eventCode,omitempty"`
	AlertCEventQuantifier int32            `protobuf:"varint,11,opt,name=alertCEventQuantifier,proto3" json:"alertCEventQuantifier,omitempty"`
	IsBlocking            bool             `protobuf:"varint,12,opt,name=isBlocking,proto3" json:"isBlocking,omitempty"`
	Timestamp             int64            `protobuf:"varint,13,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // received timestamp from provider, number of milliseconds since the Epoch
}

func (x *Incident) Reset() {
	*x = Incident{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trafficproxy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Incident) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Incident) ProtoMessage() {}

func (x *Incident) ProtoReflect() protoreflect.Message {
	mi := &file_trafficproxy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Incident.ProtoReflect.Descriptor instead.
func (*Incident) Descriptor() ([]byte, []int) {
	return file_trafficproxy_proto_rawDescGZIP(), []int{9}
}

func (x *Incident) GetIncidentID() string {
	if x != nil {
		return x.IncidentID
	}
	return ""
}

func (x *Incident) GetAffectedWayIDs() []int64 {
	if x != nil {
		return x.AffectedWayIDs
	}
	return nil
}

func (x *Incident) GetIncidentType() IncidentType {
	if x != nil {
		return x.IncidentType
	}
	return IncidentType_ACCIDENT
}

func (x *Incident) GetIncidentSeverity() IncidentSeverity {
	if x != nil {
		return x.IncidentSeverity
	}
	return IncidentSeverity_BLOCKER
}

func (x *Incident) GetIncidentLocation() *Location {
	if x != nil {
		return x.IncidentLocation
	}
	return nil
}

func (x *Incident) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Incident) GetFirstCrossStreet() string {
	if x != nil {
		return x.FirstCrossStreet
	}
	return ""
}

func (x *Incident) GetSecondCrossStreet() string {
	if x != nil {
		return x.SecondCrossStreet
	}
	return ""
}

func (x *Incident) GetStreetName() string {
	if x != nil {
		return x.StreetName
	}
	return ""
}

func (x *Incident) GetEventCode() int32 {
	if x != nil {
		return x.EventCode
	}
	return 0
}

func (x *Incident) GetAlertCEventQuantifier() int32 {
	if x != nil {
		return x.AlertCEventQuantifier
	}
	return 0
}

func (x *Incident) GetIsBlocking() bool {
	if x != nil {
		return x.IsBlocking
	}
	return false
}

func (x *Incident) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon float64 `protobuf:"fixed64,2,opt,name=lon,proto3" json:"lon,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trafficproxy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_trafficproxy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_trafficproxy_proto_rawDescGZIP(), []int{10}
}

func (x *Location) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Location) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

type TrafficStreamingDeltaRequest_StreamingRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// send flows by streaming when flow_count >= maxSize or not_send_time_interval >= maxTime seconds
	MaxSize int32 `protobuf:"varint,1,opt,name=maxSize,proto3" json:"maxSize,omitempty"`
	MaxTime int32 `protobuf:"varint,2,opt,name=maxTime,proto3" json:"maxTime,omitempty"` // unit: seconds
}

func (x *TrafficStreamingDeltaRequest_StreamingRule) Reset() {
	*x = TrafficStreamingDeltaRequest_StreamingRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trafficproxy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficStreamingDeltaRequest_StreamingRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficStreamingDeltaRequest_StreamingRule) ProtoMessage() {}

func (x *TrafficStreamingDeltaRequest_StreamingRule) ProtoReflect() protoreflect.Message {
	mi := &file_trafficproxy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficStreamingDeltaRequest_StreamingRule.ProtoReflect.Descriptor instead.
func (*TrafficStreamingDeltaRequest_StreamingRule) Descriptor() ([]byte, []int) {
	return file_trafficproxy_proto_rawDescGZIP(), []int{3, 0}
}

func (x *TrafficStreamingDeltaRequest_StreamingRule) GetMaxSize() int32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *TrafficStreamingDeltaRequest_StreamingRule) GetMaxTime() int32 {
	if x != nil {
		return x.MaxTime
	}
	return 0
}

var File_trafficproxy_proto protoreflect.FileDescriptor

var file_trafficproxy_proto_rawDesc = []byte{
	0x0a, 0x12, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x22, 0xdc, 0x03, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x11, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x57, 0x61, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x57, 0x61, 0x79, 0x49, 0x44,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x57, 0x61, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x70, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0f, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x22, 0x13, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2e, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x57, 0x61, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x61, 0x79, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x12, 0x52, 0x06,
	0x77, 0x61, 0x79, 0x49, 0x44, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x1c, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x43, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa1, 0x01, 0x0a,
	0x0f, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x40, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x12, 0x4c, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x49, 0x6e, 0x63,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11, 0x69,
	0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x22, 0x91, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x2c, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x73, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x73, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0xbe, 0x01,
	0x0a, 0x04, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x79, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x77, 0x61, 0x79, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x96,
	0x01, 0x0a, 0x10, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x69,
	0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x73, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x73,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0xd0, 0x04, 0x0a, 0x08, 0x49, 0x6e, 0x63, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x57, 0x61, 0x79, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x12, 0x52, 0x0e, 0x61, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x57, 0x61, 0x79, 0x49, 0x44, 0x73, 0x12, 0x3e, 0x0a, 0x0c,
	0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x10,
	0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x53, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x43, 0x72, 0x6f,
	0x73, 0x73, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x43,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x2e, 0x0a, 0x08, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x2a, 0x25, 0x0a, 0x0b, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4c, 0x4f,
	0x57, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x2a, 0x64, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x53, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4f, 0x4e, 0x47, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x46,
	0x52, 0x45, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x0a, 0x2a, 0x20, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x2a, 0xf3, 0x01, 0x0a, 0x0c, 0x49, 0x6e,
	0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43,
	0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x47,
	0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4e, 0x53,
	0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4d,
	0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x10, 0x05, 0x12, 0x11,
	0x0a, 0x0d, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10,
	0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x41, 0x44, 0x5f, 0x48, 0x41, 0x5a, 0x41, 0x52, 0x44,
	0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x0b,
	0x0a, 0x07, 0x57, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x45, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f, 0x41, 0x44, 0x5f,
	0x43, 0x4c, 0x4f, 0x53, 0x55, 0x52, 0x45, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f, 0x41,
	0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c, 0x2a,
	0x53, 0x0a, 0x10, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x49, 0x4e,
	0x4f, 0x52, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x4d, 0x50, 0x41,
	0x43, 0x54, 0x10, 0x04, 0x32, 0x63, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x03, 0xf8, 0x01, 0x01, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trafficproxy_proto_rawDescOnce sync.Once
	file_trafficproxy_proto_rawDescData = file_trafficproxy_proto_rawDesc
)

func file_trafficproxy_proto_rawDescGZIP() []byte {
	file_trafficproxy_proto_rawDescOnce.Do(func() {
		file_trafficproxy_proto_rawDescData = protoimpl.X.CompressGZIP(file_trafficproxy_proto_rawDescData)
	})
	return file_trafficproxy_proto_rawDescData
}

var file_trafficproxy_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_trafficproxy_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_trafficproxy_proto_goTypes = []interface{}{
	(TrafficType)(0),                     // 0: trafficproxy.TrafficType
	(TrafficLevel)(0),                    // 1: trafficproxy.TrafficLevel
	(Action)(0),                          // 2: trafficproxy.Action
	(IncidentType)(0),                    // 3: trafficproxy.IncidentType
	(IncidentSeverity)(0),                // 4: trafficproxy.IncidentSeverity
	(*TrafficRequest)(nil),               // 5: trafficproxy.TrafficRequest
	(*TrafficAllRequest)(nil),            // 6: trafficproxy.TrafficAllRequest
	(*TrafficWayIDsRequest)(nil),         // 7: trafficproxy.TrafficWayIDsRequest
	(*TrafficStreamingDeltaRequest)(nil), // 8: trafficproxy.TrafficStreamingDeltaRequest
	(*TrafficResponse)(nil),              // 9: trafficproxy.TrafficResponse
	(*TrafficSource)(nil),                // 10: trafficproxy.TrafficSource
	(*FlowResponse)(nil),                 // 11: trafficproxy.FlowResponse
	(*Flow)(nil),                         // 12: trafficproxy.Flow
	(*IncidentResponse)(nil),             // 13: trafficproxy.IncidentResponse
	(*Incident)(nil),                     // 14: trafficproxy.Incident
	(*Location)(nil),                     // 15: trafficproxy.Location
	(*TrafficStreamingDeltaRequest_StreamingRule)(nil), // 16: trafficproxy.TrafficStreamingDeltaRequest.StreamingRule
}
var file_trafficproxy_proto_depIdxs = []int32{
	10, // 0: trafficproxy.TrafficRequest.trafficSource:type_name -> trafficproxy.TrafficSource
	0,  // 1: trafficproxy.TrafficRequest.trafficType:type_name -> trafficproxy.TrafficType
	6,  // 2: trafficproxy.TrafficRequest.trafficAllRequest:type_name -> trafficproxy.TrafficAllRequest
	7,  // 3: trafficproxy.TrafficRequest.trafficWayIDsRequest:type_name -> trafficproxy.TrafficWayIDsRequest
	8,  // 4: trafficproxy.TrafficRequest.trafficStreamingDeltaRequest:type_name -> trafficproxy.TrafficStreamingDeltaRequest
	16, // 5: trafficproxy.TrafficStreamingDeltaRequest.streamingRule:type_name -> trafficproxy.TrafficStreamingDeltaRequest.StreamingRule
	11, // 6: trafficproxy.TrafficResponse.flowResponses:type_name -> trafficproxy.FlowResponse
	13, // 7: trafficproxy.TrafficResponse.incidentResponses:type_name -> trafficproxy.IncidentResponse
	12, // 8: trafficproxy.FlowResponse.flow:type_name -> trafficproxy.Flow
	2,  // 9: trafficproxy.FlowResponse.action:type_name -> trafficproxy.Action
	1,  // 10: trafficproxy.Flow.trafficLevel:type_name -> trafficproxy.TrafficLevel
	14, // 11: trafficproxy.IncidentResponse.incident:type_name -> trafficproxy.Incident
	2,  // 12: trafficproxy.IncidentResponse.action:type_name -> trafficproxy.Action
	3,  // 13: trafficproxy.Incident.incidentType:type_name -> trafficproxy.IncidentType
	4,  // 14: trafficproxy.Incident.incidentSeverity:type_name -> trafficproxy.IncidentSeverity
	15, // 15: trafficproxy.Incident.incidentLocation:type_name -> trafficproxy.Location
	5,  // 16: trafficproxy.TrafficService.GetTrafficData:input_type -> trafficproxy.TrafficRequest
	9,  // 17: trafficproxy.TrafficService.GetTrafficData:output_type -> trafficproxy.TrafficResponse
	17, // [17:18] is the sub-list for method output_type
	16, // [16:17] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_trafficproxy_proto_init() }
func file_trafficproxy_proto_init() {
	if File_trafficproxy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_trafficproxy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trafficproxy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trafficproxy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficWayIDsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trafficproxy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficStreamingDeltaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trafficproxy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trafficproxy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trafficproxy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trafficproxy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trafficproxy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncidentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trafficproxy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Incident); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trafficproxy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trafficproxy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficStreamingDeltaRequest_StreamingRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_trafficproxy_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*TrafficRequest_TrafficAllRequest)(nil),
		(*TrafficRequest_TrafficWayIDsRequest)(nil),
		(*TrafficRequest_TrafficStreamingDeltaRequest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trafficproxy_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_trafficproxy_proto_goTypes,
		DependencyIndexes: file_trafficproxy_proto_depIdxs,
		EnumInfos:         file_trafficproxy_proto_enumTypes,
		MessageInfos:      file_trafficproxy_proto_msgTypes,
	}.Build()
	File_trafficproxy_proto = out.File
	file_trafficproxy_proto_rawDesc = nil
	file_trafficproxy_proto_goTypes = nil
	file_trafficproxy_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TrafficServiceClient is the client API for TrafficService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrafficServiceClient interface {
	GetTrafficData(ctx context.Context, in *TrafficRequest, opts ...grpc.CallOption) (TrafficService_GetTrafficDataClient, error)
}

type trafficServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrafficServiceClient(cc grpc.ClientConnInterface) TrafficServiceClient {
	return &trafficServiceClient{cc}
}

func (c *trafficServiceClient) GetTrafficData(ctx context.Context, in *TrafficRequest, opts ...grpc.CallOption) (TrafficService_GetTrafficDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TrafficService_serviceDesc.Streams[0], "/trafficproxy.TrafficService/GetTrafficData", opts...)
	if err != nil {
		return nil, err
	}
	x := &trafficServiceGetTrafficDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TrafficService_GetTrafficDataClient interface {
	Recv() (*TrafficResponse, error)
	grpc.ClientStream
}

type trafficServiceGetTrafficDataClient struct {
	grpc.ClientStream
}

func (x *trafficServiceGetTrafficDataClient) Recv() (*TrafficResponse, error) {
	m := new(TrafficResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TrafficServiceServer is the server API for TrafficService service.
type TrafficServiceServer interface {
	GetTrafficData(*TrafficRequest, TrafficService_GetTrafficDataServer) error
}

// UnimplementedTrafficServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTrafficServiceServer struct {
}

func (*UnimplementedTrafficServiceServer) GetTrafficData(*TrafficRequest, TrafficService_GetTrafficDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTrafficData not implemented")
}

func RegisterTrafficServiceServer(s *grpc.Server, srv TrafficServiceServer) {
	s.RegisterService(&_TrafficService_serviceDesc, srv)
}

func _TrafficService_GetTrafficData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TrafficRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrafficServiceServer).GetTrafficData(m, &trafficServiceGetTrafficDataServer{stream})
}

type TrafficService_GetTrafficDataServer interface {
	Send(*TrafficResponse) error
	grpc.ServerStream
}

type trafficServiceGetTrafficDataServer struct {
	grpc.ServerStream
}

func (x *trafficServiceGetTrafficDataServer) Send(m *TrafficResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _TrafficService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trafficproxy.TrafficService",
	HandlerType: (*TrafficServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTrafficData",
			Handler:       _TrafficService_GetTrafficData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "trafficproxy.proto",
}
