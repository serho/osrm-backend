syntax = "proto3";

package trafficproxy;

option cc_enable_arenas = true;

service TrafficService {
  rpc GetTrafficData(TrafficRequest) returns (stream TrafficResponse) {}
}

message TrafficRequest {
  TrafficSource trafficSource = 1;
  repeated TrafficType trafficType = 2;
  
  oneof request_oneof {
    TrafficAllRequest trafficAllRequest = 3;
    TrafficWayIDsRequest trafficWayIDsRequest = 4;
    TrafficStreamingDeltaRequest trafficStreamingDeltaRequest = 5;
  }

  // timestamp of expected traffic data, number of milliseconds since the Epoch. 
  // 0 means request for current(live) traffic data, otherwise request for archived traffic data.
  // For archived traffic data, only allows trafficAllRequest and trafficWayIDsRequest. 
  int64 timestamp = 6; 
}

message TrafficAllRequest {}

message TrafficWayIDsRequest {
  repeated sint64 wayIDs = 1; // positive means forward, negative means backward
}

message TrafficStreamingDeltaRequest {
  message StreamingRule {
    // send flows by streaming when flow_count >= maxSize or not_send_time_interval >= maxTime seconds
    int32 maxSize = 1;    
    int32 maxTime = 2;    // unit: seconds
  }
  StreamingRule streamingRule = 1;
}

message TrafficResponse {
  repeated FlowResponse flowResponses = 1;
  repeated IncidentResponse incidentResponses = 2;
}

message TrafficSource {
  string region = 1;
  string trafficProvider = 2;
  string mapProvider = 3;
  repeated string subregion = 4;    // leave empty if requires full region data
}

enum TrafficType {
  FLOW = 0;
  INCIDENT = 1;
}

message FlowResponse {
  Flow flow = 1;
  Action action = 2;
  string trasctionID = 3; // unique ID for tracking the Flow from provider to end user
}

message Flow {
  sint64 wayID = 1; // positive means forward, negative means backward
  float speed = 2;  // unit: meter per second. always >= 0
  TrafficLevel trafficLevel = 3;  // `trafficLevel==CLOSED` means blocking Flow
  int64 timestamp = 4; // received timestamp from provider, number of milliseconds since the Epoch
  int32 offset = 5; 
  int32 limit = 6;
}

enum TrafficLevel {
  NO_LEVELS = 0;
  CLOSED = 1;
  CONGESTED = 3;
  SLOW_SPEED = 5;
  FREE_FLOW = 7;
  UNKNOWN = 10;
}

enum Action {
  UPDATE = 0;
  DELETE = 1;
}

message IncidentResponse {
  Incident incident = 1;
  Action action = 2;
  string trasctionID = 3; // unique ID for tracking the Incident from provider to end user
}

message Incident {
  string incidentID = 1;  // unique ID of this incident
  repeated sint64 affectedWayIDs = 2; // positive means forward, negative means backward
  IncidentType incidentType = 3;
  IncidentSeverity incidentSeverity = 4;
  Location incidentLocation = 5;
  string description = 6;
  string firstCrossStreet = 7;
  string secondCrossStreet = 8;
  string streetName = 9;
  int32 eventCode = 10;
  int32 alertCEventQuantifier = 11;
  bool isBlocking = 12;
  int64 timestamp = 13; // received timestamp from provider, number of milliseconds since the Epoch
}

enum IncidentType {
  ACCIDENT = 0;
  CONGESTION = 1;
  CONSTRUCTION = 2;
  DISABLED_VEHICLE = 3;
  EVENT = 4;
  MISCELLANEOUS = 5;
  PLANNED_EVENT = 6;
  ROAD_HAZARD = 7;
  SCHEDULED_CONSTRUCTION = 8;
  WEATHER = 9;
  POLICE = 10;
  ROAD_CLOSURE = 11;
  ROAD_CONTRACTION = 12;
}

enum IncidentSeverity {
  BLOCKER = 0;
  CRITICAL = 1;
  MAJOR = 2;
  MINOR = 3;
  LOW_IMPACT = 4;
}

message Location {
  double lat = 1;
  double lon = 2;
}
